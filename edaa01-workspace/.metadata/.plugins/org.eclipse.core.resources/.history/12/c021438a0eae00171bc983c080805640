package lab3;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ListView;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.stage.Stage;
import textproc.GeneralWordCounter;

public class BookReaderController extends Application {

	private GeneralWordCounter process_book(String book_file, String bad_words_file) throws FileNotFoundException{
		// Read in bad words.
		Scanner bad_words = new Scanner(new File(bad_words_file));

		GeneralWordCounter word_counter = new GeneralWordCounter(bad_words, /*lower bound*/ 200);

		Scanner s = new Scanner(new File(book_file));
		s.useDelimiter("(\\s|,|\\.|:|;|!|\\?|'|\\\")+"); // se handledning

		// Process words in book
		while (s.hasNext()) {
			String word = s.next().toLowerCase();

			word_counter.process(word);
		}

		s.close();
		
		return word_counter;
	}
	
	@Override
	public void start(Stage primaryStage) throws Exception {
		// Initilaize empty window.
		BorderPane root = new BorderPane();
		
		Scene scene = new Scene(root);
		primaryStage.setTitle("Book Reader");
		primaryStage.setScene(scene);
		primaryStage.show();
		
		// Get word counter object.
		GeneralWordCounter counter = process_book("../lab3/nilsholg.txt", "../lab3/undantagsord.txt");
		
		// Create observable list.
		ObservableList<Map.Entry<String, Integer>> words = FXCollections.observableArrayList(counter.getWords());
		
		// Create list view.
		ListView<Map.Entry<String, Integer>>  listview = new ListView<Map.Entry<String, Integer>>(words);
		
		// Create buttons.
		Button b_alphabetic = new Button("Alphabetic");
		Button b_frequency = new Button("Frequency");
		Button b_find = new Button("Find");
		TextField textfield = new TextField();
		b_alphabetic.setOnAction((value) -> words.sort((e1, e2) -> e1.getKey().compareTo(e2.getKey())));
		b_frequency.setOnAction((value) -> words.sort((e1, e2) -> e2.getValue() - e1.getValue()));
		b_find.setOnAction((value) -> {
			String text = textfield.getText().toLowerCase();
			
			// Skapa en sublista inehållande alla par som uppfyller
			// nyckeln är lika med texten i textfieldet.
			FilteredList<Map.Entry<String, Integer>> list =  words.filtered((pair) -> pair.getKey().equals(text));
			
			// Om listan innehåller minst ett värde så
			// har vi hittat nåt.
			if(list.size() > 0){
				// Scrolla till objektet istället för att 
				// skrolla till raden.
				listview.scrollTo(list.get(0));
			}
		});
		
		// Make button fire on enter.
		textfield.setOnKeyPressed((event) -> {
			if(event.getCode().equals(KeyCode.ENTER)){
				b_find.fire();
			}
		});
		
		// Add elements to hbox.
		HBox hbox = new HBox(b_alphabetic, b_frequency, textfield, b_find);
		
		// Ändra alltid storleken på textfieldet för att passa fönstret.
		HBox.setHgrow(textfield, Priority.ALWAYS);
		
		// Display
		root.setCenter(listview);
		root.setBottom(hbox);
	}

	public static void main(String[] args) {
		Application.launch(args);
	}

}
