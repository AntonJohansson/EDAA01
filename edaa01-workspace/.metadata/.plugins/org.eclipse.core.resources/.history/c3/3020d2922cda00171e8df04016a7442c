package map;

public class SimpleHashMap<K,V> implements Map<K,V>{
	private static class Entry<K,V> implements Map.Entry<K, V>{
		private K key;
		private V value;
		private Entry<K,V> next;
		
		public Entry(K key, V value){
			this.key = key;
			this.value = value;
			next = null;
		}
		
		@Override
		public K getKey() {
			return key;
		}

		@Override
		public V getValue() {
			return value;
		}

		@Override
		public V setValue(V value) {
			this.value = value;
			return value;
		}
		
		@Override
		public String toString(){
			return key + "=" + value; // implicit String convertion?
		}
	}
	
	// Attribut
	private Entry<K,V>[] table;
	private int size = 150;
	private int capacity = 10;
	private final double kMaxLoadFactor = 0.75;
	
	public SimpleHashMap(){
		table = (Entry<K,V>[]) new Entry[capacity];
	}
	
	public SimpleHashMap(int capacity){
		this.capacity = capacity;
		table = (Entry<K,V>[]) new Entry[capacity];
	}
	
	@Override
	public V get(Object object) {
		K key = (K) object;
		Entry<K,V> e = table[index(key)];
		
		while(e != null && !e.key.equals(key)){
			e = e.next;
		}
		
		return (e != null) ? e.value : null;
	}

	@Override
	public boolean isEmpty() {
		return size == 0;
	}

	@Override
	public V put(K key, V value) {
		Entry<K,V> e = table[index(key)];
		
		if(e == null){
			table[index(key)] = new Entry<K,V>(key, value);
		}else{
			while(e.next != null && e.key.equals(key)){
				e = e.next;
			}
			
			if(e.key.equals(key)){
				V old_value = e.value;
				e.value = value;
				return old_value;
			}else{
				e.next = new Entry<K,V>(key, value);
			}
		}
		
		/*
		// Find empty spot or old value
		while(e != null && e.next != null && e.key != key){
			e = e.next;
		}
		
		if(e == null || e.next == null){ // empty spot
			Entry<K,V> new_e = new Entry<K,V>(key, value);
			
			if(e == null)table[index(key)] = new_e;
			else e.next = new_e;
			
			size++;
			
			// Check load factor
			if(size/capacity >= kMaxLoadFactor){
				capacity *= 2;
				rehash();
			}
		}else{ // old value
			old_value = e.value;
			e.value = value;
		}
		*/
		
		size++;
		
		// Check load factor
		if(size/capacity >= kMaxLoadFactor){
			capacity *= 2;
			rehash();
		}
		
		
		return null;
	}

	@Override
	public V remove(Object arg0) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int size() {
		return size;
	}
	
	public String show(){
		StringBuilder sb = new StringBuilder();
		
		Entry<K,V> e = null;
		for(int i = 0; i < capacity; i++){
			sb.append(i);
			sb.append("\t{");
			
			e = table[i];
			while(e != null){
				sb.append(e);
				sb.append(", ");
				
				e = e.next;
			}
			
			sb.append("}\n");
		}
		
		return sb.toString();
	}
	
	// Helper methods
	
	private int index(K key){
		return Math.abs(key.hashCode() % capacity);
	}
	
	private Entry<K,V> find(int index, K key){
		Entry<K,V> e = table[index];
		
		while(e != null && e.key != key){
			e = e.next;
		}
		
		return e;
	}
	
	private void rehash(){
		Entry<K,V>[] old_table = table;
		table = (Entry<K,V>[]) new Entry[capacity];
		
		size = 0; // reset size
		
		Entry<K,V> e = null;
		for(int i = 0; i < capacity; i++){
			e = table[i];
			
			while(e != null){
				put(e.key, e.value); // will reconstruct Entries, inefficient.
				e = e.next;
			}
		}
		
		old_table = null;
	}
}