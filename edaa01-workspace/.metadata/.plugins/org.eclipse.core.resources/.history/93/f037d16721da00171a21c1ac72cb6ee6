package map;

public class SimpleHashMap<K,V> implements Map<K,V>{
	private static class Entry<K,V> implements Map.Entry<K, V>{
		private K key;
		private V value;
		private Entry<K,V> next;
		
		public Entry(K key, V value){
			this.key = key;
			this.value = value;
			next = null;
		}
		
		@Override
		public K getKey() {
			return key;
		}

		@Override
		public V getValue() {
			return value;
		}

		@Override
		public V setValue(V value) {
			this.value = value;
			return value;
		}
		
		@Override
		public String toString(){
			return key + "=" + value; // implicit String convertion?
		}
	}
	
	// Attribut
	private Entry<K,V>[] table;
	private int size = 0;
	private int capacity = 10;
	private final double kLoadFactor = 0.75;
	
	public SimpleHashMap(){
		table = (Entry<K,V>[]) new Entry[capacity];
	}
	
	public SimpleHashMap(int capacity){
		this.capacity = capacity;
		table = (Entry<K,V>[]) new Entry[capacity];
	}
	
	@Override
	public V get(Object arg0) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean isEmpty() {
		return size == 0;
	}

	@Override
	public V put(K key, V value) {
		Entry<K,V> e = table[index(key)];
		V old_value = null;
		
		// Find empty spot or old value
		while(e != null && e.key != key){
			e = e.next;
		}
		
		if(e == null){ // empty spot
			e = new Entry<K,V>(key, value);
		}else{ // old value
			old_value = e.value;
			e.value = value;
		}
		
		
		return old_value;
	}

	@Override
	public V remove(Object arg0) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int size() {
		return size;
	}
	
	public String show(){
		StringBuilder sb = new StringBuilder();
		
		Entry<K,V> e = null;
		for(int i = 0; i < size; i++){
			sb.append(i);
			sb.append("\t{");
			
			e = table[i];
			while(e != null){
				sb.append(e);
				sb.append(", ");
				
				e = e.next;
			}
			
			sb.append("}\n");
		}
		
		return sb.toString();
	}
	
	// Helper methods
	
	private int index(K key){
		return key.hashCode() % capacity;
	}
	
	private Entry<K,V> find(int index, K key){
		Entry<K,V> e = table[index];
		
		while(e != null && e.key != key){
			e = e.next;
		}
		
		return e;
	}
}