package queue_delegate;
import java.util.*;

public class FifoQueue<E> extends AbstractQueue<E> implements Queue<E> {
	private Queue<E> list;

	/*
	 * Man skulle kunna använda en arraylist istället för en linked list,
	 * genom ex. 
	 * -	ArrayList<E>.add(...) för offer()
	 * -	ArrayList<E>.get(0) för peek()
	 * -	ArrayList<E>.iterator() för iterator()
	 * - 	ArrayList<E>.get() och ArrayList<E>.remove(0) för poll()
	 */
	
	public FifoQueue() {
		super();
		list = new LinkedList<E>();
	}
	
	/**	
	 * Inserts the specified element into this queue, if possible
	 * post:	The specified element is added to the rear of this queue
	 * @param	e the element to insert
	 * @return	true if it was possible to add the element 
	 * 			to this queue, else false
	 */
	public boolean offer(E e) {
		return list.offer(e);
	}

	/**	
	 * Returns the number of elements in this queue
	 * @return the number of elements in this queue
	 */
	public int size() {		
		return list.size();
	}
	
	/**	
	 * Retrieves, but does not remove, the head of this queue, 
	 * returning null if this queue is empty
	 * @return 	the head element of this queue, or null 
	 * 			if this queue is empty
	 */
	public E peek() {
		return list.peek();
	}

	/**	
	 * Retrieves and removes the head of this queue, 
	 * or null if this queue is empty.
	 * post:	the head of the queue is removed if it was not empty
	 * @return 	the head of this queue, or null if the queue is empty 
	 */
	public E poll() {
		return list.poll();
	}

	/**	
	 * Returns an iterator over the elements in this queue
	 * @return an iterator over the elements in this queue
	 */	
	public Iterator<E> iterator() {
		return list.iterator();
	}

}
